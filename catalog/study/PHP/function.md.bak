[首页](../../../README.md)
[秃头之旅](../index.md)
---

# PHP常用函数 #

| 函数 | 作用 | 说明/技巧 |
|---|---|---|
| 文本函数 |  |  |
| trim | 删除字符串两端的空格或其他预定义字符 | 默认去除换行符或空格等，参数2可定义该字符 |
| rtrim | 删除字符串右边的空格或其他预定义字符 | 默认去除换行符或空格等，参数2可定义该字符 |
| ltrim | 删除字符串左边的空格或其他预定义字符 | 默认去除换行符或空格等，参数2可定义该字符 |
| chop | rtrim的别名，删除字符串右边的空格或其他预定义字符 | 默认去除换行符或空格等，参数2可定义该字符 |
| str_pad | 将字符串填充为指定的长度 | 参数1为字符串；参数2为填充的长度，默认使用空格；【参数3制定填充的字符; 参数4可选STR_PAD_LEFT左边填充，STR_PAD_RIGHT右边填充，STR_PAD_BOTH左右填充，默认STR_PAD_RIGHT右边填充】 |
| str_repeat | 重复使用指定的字符串 | 没有更多说明 |
| str_split | 把字符串分割到数组中 | 将字符串按照规定的长度分割为数组，【默认是一个】 |
| strrev | 反转字符串 | 例如hello反转后变为olleh |
| wordwrap | 按照指定长度对字符串进行折行处理 | 参数1为字符串；【参数2为折行处理，默认75，参数3可定义换行符，参数4指定是否强制在参数2处分割】 |
| str_shuffle | 随机地打乱字符串顺序 | 没有更多说明 |
| parse_str | 将字符串解析成变量 | 对字符串进行解析，如a=5将被解析为$a="5"，该函数没有返回值，解析完成后可使用解析后的变量 |
| number_format | 通过千分位组来格式化数字 | 参数1为该数字；【参数2可选保留小数位置】 |
| strtolower | 字符串转换为小写 | 将大写字符串转换为小写的字符串 |
| strtoupper | 字符串转换为大写 | 将小写字符串转换为大写的字符串 |
| ucfirst | 字符串首字母转成大写 | 例如hello world会转为Hello world |
| ucwords | 字符串每个单词首字母转为大写 | 例如hello world会转为Hello World |
| htmlentities | 把字符转为html实体 | 本函数各方面都和 htmlspecialchars() 一样， 除了 htmlentities() 会转换所有具有 HTML 实体的字符 |
| htmlspecialchars | 预定义字符串html编码 | 某类字符在 HTML 中有特殊用处，如需保持原意，需要用 HTML 实体来表达。 本函数会返回字符转义后的表达。 如需转换子字符串中所有关联的名称实体，使用 htmlentities() 代替本函数 |
| html_entity_decode | 将html实体转换为html标签 | 将htmlentities转换的实体反转回去 |
| nl2br | \n转义为br标签 | 将文本中的系统换行符转换为br标签 |
| strip_tags | 剥去HTML、XML、以及PHP的标签 | 没有更多说明 |
| addcslashes | 在指定的字符前添加反斜线转义符 | 注意不要和addslashes搞混了，带c的是转换指定预定义，不带c的是转换特殊字符 |
| stripcslashes | 删除由addcslashes添加的转义符 | addcslashes可以在指定的预定义字符前加转义符号，此函数可以将转义符号去掉 |
| addslashes | 指定预定义字符前添加反斜线 | 这个函数长得和addcslashes有点像，注意不要搞混，此函数是在*预定义字符*前添加转移符 |
| stripslashes | 删除由addslashes添加的转义符 | 此函数于stripcslashes类似 |
| quotemeta | 在字符串中某些预定义字符前添加转义符 | 例如'&', '*'等符号前添加反斜线 |
| chr | 从指定的ASCII值返回字符串 | 解析ASCII码 |
| ord | 返回字符串第一个字符的ASCII码 | 返回该字符的ASCII值 |
| strcasecmp | 不区分大小写比较两个字符串 | 二进制安全比较字符串（不区分大小写） |
| strcmp | 比较连个字符串 | 该函数是以二进制比较的 |
| strncmp | 区分大小写比较字符串前n个字符 | 该函数是二进制安全的 |
| strncasecmp | 不区分大小写比较字符串前n个字符 | 该函数是二进制安全的 |
| strnatcmp | 自然顺序比较字符串，区分大小写 | 该函数实现了以人类习惯对数字型字符串进行排序比较的算法，这就是“自然顺序”。注意该函数区分大小写 |
| strnatcasecmp | 自然顺序比较字符串，不区分大小写 | 该函数实现了以人类习惯对数字行的字符串进行排序比较的算法，这就是“自然顺序”。注意该函数不分区大小写 |
| chunk_split | 将字符串分成小块 | 参数1为指定字符串；参数2为分割长度；参数3为分隔符号 |
| strtok | 切开字符串 | 该函数返回的是参数1中搜索到参数2前的所有字符串 |
| explode | 使用一个字符串为标志分割另一个字符串 | 注意参数顺序。参数1为标志；参数2为指定的字符串 |
| implode | 将数组值用预定字符连接成字符串 | 该函数是和explode相反的，注意参数1是连接的字符；参数2是数组 |
| substr | 截取字符串 | 参数1为要截取的字符串；参数2是开始的地方，从0开始；注意参数3是截取的长度，以参数2作为开始截取的字符串长度 |
| str_replace | 区分大小写替换字符串 | 注意参数顺序。在参数3中搜索参数1替换为参数2；参数4可选，必须是一个变量，该变量为替换的次数 |
| str_ireplace | 不区分大小写替换字符串 | 注意参数顺序。在参数3中搜索参数1替换为参数2；参数4可选，必须是一个引用变量，该变量为替换的次数 |
| substr_count | 统计一个字符串在另一个字符串中出现的次数 | 统计参数2在参数1中出现的次数；【参数3为开始查找的地方；参数4是查找的长度】 |
| substr_replace | 替换字符串中的某串为另一个字符串 | 将参数1从参数3开始(0起始)替换为参数2；参数4为替换的长度，如果为0可以当做插入字符串使用 |
| similar_text | 返回两个字符串中相同字符的数量 | 比较参数1、2；【参数3为引用地址，为两个文本的百分比相似度】 |
| strrchr | 返回一个字符串在另一个字符串中最后一次出现位置开始到末尾的字符串 | 在参数1中末尾开始搜索参数2，返回搜索到位置到末尾的字符串 |
| strstr | 返回一个字符串在另一个字符串中开始位置到结束的字符串 | 该函数有个别名叫strchr，返回参数2首次在参数1后的字符串，于strrchr不同的是本函数是从头开始搜索；参数3如果为true则返回参数2在参数1中首次出现前的字符串 |
| strchr | strstr的别名，返回一个字符串在另一个字符串中开始位置到结束的字符串 | 本函数是strstr的别名，返回参数2首次在参数1后的字符串，于strrchr不同的是本函数是从头开始搜索；参数3如果为true则返回参数2在参数1中首次出现前的字符串 |
| stristr | 不区分大小写的返回一个字符串在另一个字符串中开始位置到结束的字符串 | 这个函数和strstr、strchr相同，其特点是不区分大小写 |
| strtr | 准话你字符串中的某些字符 | 也属于字符串替换操作，在参数1中搜索参数2替换为参数3，注意只会替换单个字符 |
| strpos | 寻找字符串中某字符最先出现的位置 | 搜索参数2在参数1最先出现的地方，【参数3可以指定起始搜索位置】 |
| stripos | 寻找字符串中某字符最先出现的位置，不区分大小写 | 该函数比起strpos其特点是不区分大小写的查找 |
| strrpos | 寻找字符串中某串字符最后出现的位置 | 该函数和strpos相似，是从后向前开始查找的 |
| strripos | 寻找字符串中某串字符最后出现的位置，不区分大小写 | 该函数和strpos相似，是从后向前开始查找的，并且不区分大小写 |
| strspn | 返回字符串中首次符合mask的子字符串长度 | 返回参数2首次和参数1不同的位置，详见http://php.net/manual/zh/function.strspn.php |
| strcspn | 返回字符串中不符合mask的字符串的长度 | 我也不懂，详见http://php.net/manual/zh/function.strcspn.php |
| str_word_count | 返回字符串中的单词数量 | 没有更多说明 |
| strlen | 获取字符串长度 | 使用mb_strlen函数可以获取中文的个数 |
| count_chars | 统计字符串中所有字母出现的次数，以数组格式 | 返回的数组是ASCII码列表，ascii中的该字母的次数 |
| md5 | 字符串md5编码 | 没有更多说明 |
| 数组函数 |  |  |
|  |  |  |
| array_combine | 生成一个数组，用第一个数组的值作为键，第二个数组的值作为值 | 两个参数的长度必须一样才行哦！ |
| range | 生成一个指定范围内的数组，例如0...9 | 本函数使用的是ascii字典顺序哦 |
| compact | 创建一个由参数所带变量组成的数组 | 解析参数为变量，返回解析后的值作为数组值 |
| array_fill | 用给定的值填充\生成数组 | 填充数组，第一个参数是键起始；第二个参数是填充长度；使用第三个参数填充 |
| array_chunk | 把一个数组分割为新的数组块 | 参数3设为 TRUE，可以使 PHP 保留输入数组中原来的键名。如果你指定了 FALSE，那每个结果数组将用从零开始的新数字索引。默认值是 FALSE |
| array_merge | 把两个或多个数组合并为一个数组 | 可以是多维数组，但必须是数组 |
| array_slice | 在数组中根据偏移量去除一段值返回 | 参数2为起始位置，参数3为截取长度 |
| array_diff | 返回两个数组的差集数组 | 就是把两个数组中不同的值的地方返回 |
| array_intersect | 返回两个数组的交集 | 就是返回两个数组相同的地方 |
| array_search | 在数组中查找一个值，如果找到了返回键，找不到返回false。不区分大小写 | 注意判断找不到的时候使用 in_array('value', []) === false |
| array_splice | 把数组中一部分删除，可以用其他值代替 | 这个函数和array_slice有点相似，如果不指定第四个参数那么可以用这个函数删除数组中的一部分 |
| array_sum | 返回数组中所有值的和 | 预制放入其他类型的参数会怎样，请见PHP类型转换章节(会自动转型为数字型进行计算) |
| in_array | 在数组中搜索一个值，区分大小写 | 这个函数和array_search有点像，不同的是区分大小写、找到后返回的是true而不是键名 |
| array_key_exists | 检测一个数组中是否存在指定的键 | 参数1是要检测的键，在参数2中搜索 |
| key | 返回数组当前指向的元素键名 | 数组指针( ⊙ o ⊙ )！ |
| current | 返回数组中的当前元素(值) | 数组指针( ⊙ o ⊙ )！ |
| next | 将数组的指针向后移动一次，返回移动后的值 | 注意返回的是移动后的值 |
| prev | 将数组的指针向前移动一次，返回移动后的值 | 注意返回的是移动后的值 |
| end | 将数组的指针移动到最后一个元素，并返回移动后的值 | 注意返回的是移动后的值 |
| reset | 将数组的指针移动到头部，病返回移动后的值 | 注意返回的是移动后的值 |
| list | 用数组的元素为一组变量赋值 | 这个函数是我遇到最特别的一个函数，用法是list($a, $b) = \['数', '组'] 配合each可以循环数组，类似JS中的解构赋值 |
| array_shift | 删除数组的第一个元素，并返回被删除元素的值 | 弹出头部 |
| array_unshift | 在数组的前插入一个或多个元素 | 该函数具有返回值，返回插入后数组的长度 |
| array_push | 在数组后压入一个或多个元素 | 该函数具有返回值，返回插入后数组的长度 |
| array_pop | 弹出数组中的最后一个元素，并返回弹出的值 | 弹出尾部 |
| shuffle | 将数组打乱，保留键名 | 返回打乱是否成功 |
| count | 获取数组的长度 | 没有更多说明 |
| array_flip | 返回一个键值反转后的数组 | 把数组的值变为键，键变为值(写到这懵逼了下...) |
| array_keys | 返回一个数组所有的键，组成一个数组 | 获取一个数组中的所有的键，结果为索引数组。可以是多维数组 |
| array_values | 返回一个数组所有的值，组成一个数组 | 获取一个数组中的所有的值，结果为索引数组。可以是多维数组 |
| array_reverse | 反转数组的顺序 | 把数组倒过来n(≧▽≦)n |
| array_count_values | 统计数组中每个值出现的次数 | 值作为新数组的键，值为该值出现的次数 |
| array_rand | 在数组中随机取出一个元素的键名 | 参数2可以指定一次取出多少个，但是注意随机取出的是键名而不是值 |
| each | 返回数组当前的键和值，并后移一位指针 | 不推荐使用，如需特殊遍历可以实现Iterator接口 |
| array_unique | 删除数组中的重复的值，返回一个没有重复值的数组 | 数组去重 |
| sort | 按升序对数组进行排序，不保留键名 | 升序排序 |
| rsort | 对数组进行逆向排序，不保留键名 | 降序排序 |
| asort | 对数组进行升序排序，保留原来的键名 | 保留键名升序排序 |
| arsort | 对数组进行逆向排序，保留原来的键名 | 保留键名降序排序 |
| ksort | 按照键名对数组进行升序排序 | 按照键进行排序 |
| krsort | 按照键名对数组进行逆向排序 | 按照键名逆向排序 |
| natsort | 按照自然顺序算法对数组进行排序 | 以人类习惯对数字行的字符串进行排序比较的算法，这就是“自然顺序” |
| natcasesort | 按照自然顺序，不区分大小写进行升序排序 | 和natsort类似，但是不会区分大小写 |
| 数学函数 |  |  |
| abs | 求绝对值 | 没有更多说明 |
| ceil | 进一取整 | 如果有小数部分则向上取整 |
| floor | 舍去法取整 | 直接舍去小数部分 |
| fmod | 浮点数取余 | 说实话这个我也不知道怎么用的 |
| pow | 返回数的n次方 | 求次方 |
| round | 四舍五入取整 | 四舍五入取整 |
| sqrt | 求平方根 | 求平方根 |
| max | 求最大值 | 求一组数字的最大值 |
| min | 求最小值 | 求一组数字的最小值 |
| mt_rand | 更好的随机数 | 很多老的 libc 的随机数发生器具有一些不确定和未知的特性而且很慢。PHP 的 rand() 函数默认使用 libc 随机数发生器。mt_rand() 函数是非正式用来替换它的。该函数用了 » Mersenne Twister 中已知的特性作为随机数发生器，它可以产生随机数值的平均速度比 libc 提供的 rand() 快四倍 |
| rand | 随机数 | 更推荐使用mt_rand |
| pi | 获取圆周率值 | double(3.1415926535898) |
| 文件函数 |  |  |
| fopen | 打开文件或URL | [fopen的正确打开方式](./more/fopen.md) |
| fscanf | 根据格式从文件中解析输入 | 标准输入、输出（STDIN, STDOUT, STDERR） |
| fclose | 关闭一个一打开的文件指针 | 关闭fopen对象 |
| file_exists | 检测文件或目录是否存在 | 没有更多说明 |
| filesize | 获取文件大小 | 注意大小是bytes |
| is_readable | 检测文件是否可读 | 检测的是权限 |
| is_writable | 检测文件是否可写入 | 检测的是权限，注意函数名没有write的e |
| is_executable | 检测文件是否为可执行文件 | 检测文件类型和相对于目前用户的权限 |
| filectime | 获取文件的创建时间 | 返回的是时间戳 |
| filemtime | 获取文件的修改时间 | 返回的是时间戳 |
| fileatime | 获取文件的上次访问时间 | 返回的是时间戳 |
| touch | 创建一个文件，可以为其设置修改时间和访问时间 | 如果文件已存在则可以使用此函数修改这个文件的修改时间和访问时间 |
| stat | 获取文件的详细信息(属性值) | [stat](./more/stat.md) |
| fwrite | 写入文件 | 参数1为fopen对象，参数2为要写入的内容，参数3为写入的长度 |
| fputs | fwrite的别名 | 和fwrite一样的用法 |
| fread | 读取文件 | 参数1为fopen对象，参数2为要读取的长度 |
| feof | 检测文件指针是否到了文件末尾 | 在循环读取文件时会用到。我记得有次我是检测读取结果为空时结束读取，搞 了半天 |
| fgets | 从文件指针中读取一行 | 注意有时候读取结果为空，并不是全部读取完了，可能是文件中这行是换行什么的 |
| fgetc | 从文件指针中读取一个字符 | 注意每次进行读取操作都会后移文件指针 |
| file | 把整个文件读取到一个数组中 | 将文件读取到数组中，每行都是一个键值对 |
| readfile | 输出一个文件 | 可用于web中强制下载文件 |
| file_get_contents | 将整个文件读入到一个字符串中 | 该函数包含了fopen、fread、fclose。可以指定偏移量，读取长度 |
| file_put_contents | 将一个字符串写入到一个文件中 | 将参数2写入到参数1文件，参数3可以指定写入方式 |
| ftell | 返回文件读/写的位置 | 返回由 handle 指定的文件指针的位置，也就是文件流中的偏移量 |
| fseek | 在文件指针中定位 | 在与 handle 关联的文件中设定文件指针位置。 新位置从文件头开始以字节数度量，是以 whence 指定的位置加上 offset |
| rewind | 倒回文件指针的位置 | 撤销上一次指针的操作 |
| flock | 轻便的咨询文件锁定 | 参数2可以为：LOCK_SH取得共享锁定（读取的程序）。LOCK_EX 取得独占锁定（写入的程序。LOCK_UN 释放锁定（无论共享或独占） |
| basename | 返回路径中的文件名部分 | 返回最后一个/后的字符串 |
| dirname | 返回路径中的目录部分 | 返回最后一个/前的字符串 |
| pathinfo | 返回文件路径的信息 | 这个函数可以代替dirname、basename等函数，参数2指定值：PATHINFO_DIRNAME；PATHINFO_BASENAME；PATHINFO_EXTENSION；PATHINFO_FILENAME |
| opendir | 打开目录句柄 | 注意打开的是目录句柄，不是文件 |
| readdir | 从目录句柄中读取条目 | 读取opendir对象中的目录，注意可以读到.和..目录 |
| closedir | 关闭目录句柄 | 关闭由opendir打开的文件句柄 |
| rewinddir | 倒回目录句柄 | 撤销一次指针操作 |
| mkdir | 新建目录 | 参数2是Linux的权限位；参数3选择是否递归创建目录 |
| rmdir | 删除目录 | 删除一个空目录，无法删除非空目录 |
| unlink | 删除文件 | 删除文件 |
| copy | 复制文件 | 复制文件 |
| getcwd | 返回当前工作目录 | 获取当前工作目录的绝对路径 |
| chdir | 改变当前的目录 | 改变当前的工作目录 |
| scandir | 返回目录中的文件目录和文件，以数组格式返回 | 读取目录，一个数组，包含这个目录下的所有目录和文件 |
| realpath | 获取一个相对路径的绝对路径 | 将相对路径转换为绝对路径 |
| rename | 重命名一个文件或目录 | 这个函数还能用于移动文件。操作原理是先复制这个文件，成功后删除原来的文件 |
| is_uploaded_file | 判断文件是否是通过HTTP POST上传的 | 文件上传 |
| move_uploaded_file | 将上传的文件从暂存区移动到新位置 | 文件上传 |
| 高级函数/属性 |  |  |
| spl_autoload_register | 自动引入：调用一个不存在的类的时候会调用该方法 | 该函数代替了__autoload(),在5.3版本引入了命名空间的支持 |
| __construct | 魔术方法：构造方法 | 魔术方法 |
| __destruct | 魔术方法：析构方法 | 魔术方法 |
| __call | 魔术方法：读取不可访问方法时被调用 | 魔术方法 |
| __callStatic | 魔术方法：读取不可访问的静态方法时被调用 | 魔术方法 |
| __get | 魔术方法：读取不可访问属性的值时被调用 | 魔术方法 |
| __set | 魔术方法：在给不可访问属性赋值时被调用 | 魔术方法 |
| __isset | 魔术方法：当对不可访问属性调用 isset() 或 empty() 时，会被调用 | 魔术方法 |
| __unset | 魔术方法：无权限/销毁对象不存在的属性的时候被调用 | 魔术方法 |
| __toString | 魔术方法：当把对象当做字符串使用的时候被调用 | 魔术方法 |
| __clone | 魔术方法：当对象被clone关键字克隆的时候被调用 | 魔术方法，注意一下：克隆的对象会保存当前的状态，但不会再随当前这个对象改变(虽然不怎么用) |
| __invoke | 魔术方法：当对象被当做函数使用的的时候被调用 | 魔术方法，注意一下：形参是传过来的参数 |
| __sleep | 魔术方法：进行序列化的时候会先调用这个方法 | 魔术方法，来自官方的提示：不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代 |
| __wakeup | 魔术方法：进行反序列化的时候这个方法会被调用 | 魔术方法，来自官方的提示：经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作 |
| __set_state | 魔术方法：当对象被var_export()的时候会被调用 | 魔术方法，来自官方的提示：自 PHP 5.1.0 起当调用 var_export() 导出类时，此静态 方法会被调用。(虽然不怎么用，(压根没用过)) |
| __debuginfo | 魔术方法：调试利器，当对象被var_dump()的时候会被调用 | 魔术方法，来自官方的提示：转储对象以获取应显示的属性时 ，var_dump（）调用此方法。如果未在对象上定义该方法，则将显示所有公共属性，受保护属性和私有属性 |
| __FILE__ | 魔术常量：标示文件的完整路径和文件名 | 魔术常量：文件(绝对路径) |
| __LINE__ | 魔术常量：标示文件中当前行号 | 魔术常量：行号 |
| __DIR__ | 魔术常量：标示当前文件所在目录 | 魔术常量：目录 |
| __FUNCTION__ | 魔术常量：标示当前方法名 | 魔术常量：方法名 |
| __CLASS__ | 魔术常量：标示当前所在类的名字 | 魔术常量：类名 |
| __METHOD__ | 魔术常量：标示当前对象中的方法名 | 魔术常量：对象::方法名 |
| __NAMESPACE__ | 魔术常量：标示当前命名空间 | 魔术常量：命名空间 |
| __TRAIT__ | 魔术常量：标示当前trait | 魔术常量：来自官方的说明：Trait 名包括其被声明的作用区域（例如 Foo\Bar） |
| get_class | 调试利器：获取对象的类名 | 返回对象实例 object 所属类的名字 |
| get_class_vars | 调试利器：输入一个类名，获取这个类公开的属性 | 注意：参数是类名而不是对象 |
| get_class_methods | 调试利器：输入一个类名，获取这个类公开的方法 | 注意：参数是类名而不是对象 |
| get_object_vars | 调试利器：获取一个对象所有可访问属性返回一个数组 | 注意：参数是对象而不是类名 |
| function_exists | 调试利器：检测一个方法是否存在 | 检查方法是否存在，注意不能用来检测对象中的方法是否存在 |
| method_exists | 调试利器：检测对象中的方法是否存在 | 检测对象中的方法是否存在，注意和function_exists有点区别 |
| debug_backtrace | 调试利器：产生回溯跟踪 | 参数1可选DEBUG_BACKTRACE_PROVIDE_OBJECT：是否填充 "object" 的索引；DEBUG_BACKTRACE_IGNORE_ARGS：是否忽略 "args" 的索引，包括所有的 function/method 的参数，能够节省内存开销；参数2可选记录堆栈帧量 |
| debug_print_backtrace | 调试利器：打印回溯跟踪 |  参数1可选DEBUG_BACKTRACE_PROVIDE_OBJECT：是否填充 "object" 的索引；DEBUG_BACKTRACE_IGNORE_ARGS：是否忽略 "args" 的索引，包括所有的 function/method 的参数，能够节省内存开销；参数2可选记录堆栈帧量 |
